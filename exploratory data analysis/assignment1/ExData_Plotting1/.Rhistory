x <- 4
class(x)
x <- c(4, TRUE)
class(x)
a <- c(4, TRUE)
class(a)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
a=rbind(x, y)
class(a)
rank(a)
dimensions(a)
dim(a)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2:3
x+y
x <- c(3, 5, 1, 10, 12, 6)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL;
setFn <- function(newX) {
inverse <<- NULL;
x <<- newX;
};
getFn <- function() {
x;
};
setInverseFn <- function(newInverse) {
inverse <<- newInverse;
};
getInverseFn <- function() {
inverse;
};
list(set = setFn, get = getFn, setInverse = setInverseFn, getInverse = getInverseFn);
}
## Calculate or take from cache matrix inverse
cacheSolve <- function(x, ...) {
inverse <- x$getInverse();
if(!is.null(inverse)) {
message("Getting cached data");
return(inverse);
}
data <- x$get()
inverse <- solve(data, ... = ...)
x$setInverse(inverse);
inverse;
}
a = makeCachMatrix()
a = makeCacheMatrix()
cahceSolve(a)
cacheSolve(a)
matrix( rnorm(10*10,mean=0,sd=1), 10, 10)
a = matrix( rnorm(N*M,mean=0,sd=1), N, M)
a =matrix( rnorm(10*10,mean=0,sd=1), 10, 10)
b = makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
?hist
?windows
windows()
?xfig
windows()
?Devices
?quartz
install.packages("XML")
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
url2 = "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(url2, useInternal=TRUE)
doc <- xmlTreeParse(url2, useInternal=TRUE)
doc <- xmlTreeParse("/Users/cschwaiger/courses/datasciencecoursera/getting and cleaning data/quiz1 data/getdata-data-restaurants.xml", useInternal=TRUE)
head(doc)
rootNode <- xmlRoot(doc)
rootNOde
rootNode
names(rootNode)
rottNode[[1]]
rootNode[[1]]
rootNode[[2]]
rootNode[[1][1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
xpathSApply(rootNode)
xpathSApply(rootNode, "//name")
xpathSApply(rootNode, "//zip")
xpathSApply(rootNode, "//zip", xmlValue)
a = xpathSApply(rootNode, "//zip", xmlValue)
a
a = xpathSApply(rootNode, "//zipcode", xmlValue)
a
sum(b <- a == 21231)
data <- read.csv("../household_power_consumption.txt", sep =";", na.strings = "?")
## filter only needed rows by date
dates <-c("1/2/2007", "2/2/2007")
graphData <- subset(data, data$Date %in% dates )
## generate a histogram
hist(sub$Global_active_power, col = "red", xlab = "Global active power (kilowatts)", main = "Global Active Power")
source('~/courses/datasciencecoursera/exploratory data analysis/assignment1/ExData_Plotting1/plot1.R')
getwd()
setwd("/Users/cschwaiger/courses/datasciencecoursera/exploratory data analysis/assignment1/ExData_Plotting1")
data <- read.csv("../household_power_consumption.txt", sep =";", na.strings = "?")
## filter only needed rows by date
dates <-c("1/2/2007", "2/2/2007")
graphData <- subset(data, data$Date %in% dates )
## generate a histogram
hist(graphData$Global_active_power, col = "red", xlab = "Global active power (kilowatts)", main = "Global Active Power")
dates <-c("1/2/2007", "2/2/2007")
graphData <- subset(data, data$Date %in% dates )
## generate data for x axis by:
## - concatenating Date and Time column in a list
dt <- strptime(paste(graphData$Date,graphData$Time), "%d/%m/%Y %H:%M:%S")
## plot date-time values against power setting the necessary labels using a line
plot(dt, graphData$Global_active_power, type = "l", xlab ="", ylab ="Glabal active power (kilowatts)")
dates <-c("1/2/2007", "2/2/2007")
graphData <- subset(data, data$Date %in% dates )
## generate data for x axis by:
## - concatenating Date and Time column in a list
dt <- strptime(paste(graphData$Date,graphData$Time), "%d/%m/%Y %H:%M:%S")
## plot date-time values against sub_metering1 adding the necessary labels using a line
plot(dt, graphData$Global_active_power, type = "l", xlab ="", ylab ="Energy sub metering")
## add lines for submetering 2 and 3 in the required colors
lines(dt, sub$Sub_metering_2, col = "red")
lines(dt, sub$Sub_metering_3, col = "blue")
## add the legend
legend("topright",lty=c(1,1,1), col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dates <-c("1/2/2007", "2/2/2007")
graphData <- subset(data, data$Date %in% dates )
## generate data for x axis by:
## - concatenating Date and Time column in a list
dt <- strptime(paste(graphData$Date,graphData$Time), "%d/%m/%Y %H:%M:%S")
## plot date-time values against power setting the necessary labels using a line
plot(dt, graphData$Global_active_power, type = "l", xlab ="", ylab ="Glabal active power (kilowatts)")
axis(side = 2, at = c(0, 10, 20, 30))
dates <-c("1/2/2007", "2/2/2007")
graphData <- subset(data, data$Date %in% dates )
## generate data for x axis by:
## - concatenating Date and Time column in a list
dt <- strptime(paste(graphData$Date,graphData$Time), "%d/%m/%Y %H:%M:%S")
## plot date-time values against power setting the necessary labels using a line
plot(dt, graphData$Global_active_power, type = "l", xlab ="", ylab ="Glabal active power (kilowatts)")
axis(side = 2, at = c(0, 10, 20, 30))
axis(side = 2, at = c(0, 10, 20, 30))
source('~/courses/datasciencecoursera/exploratory data analysis/assignment1/ExData_Plotting1/plot2.R')
axis(side = 2, at = c(0, 10, 20, 30))
source('~/courses/datasciencecoursera/exploratory data analysis/assignment1/ExData_Plotting1/plot2.R')
